<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syn.Bot</name>
    </assembly>
    <members>
        <member name="F:Syn.EmotionML.Part.Category">
            <summary>
            possible parts of an emotion annotation
            </summary>
        </member>
        <member name="F:Syn.EmotionML.Part._value">
            <summary>
            the value [0.0, 1.0]
            dimension MUST have a value or a trace, the other MAY //TODO:
            </summary>
        </member>
        <member name="F:Syn.EmotionML.Part._confidence">
            <summary>
            confidence when we recognise the emotion [0.0, 1.0]
            </summary>
        </member>
        <member name="F:Syn.EmotionML.Part._trace">
            <summary>
            trace if we want have a value over time
            </summary>
        </member>
        <member name="F:Syn.EmotionML.ActionTendency.ActiontendencyFrijda">
            <summary>
            Vocabularies for action tendencies of EmotionML 1.0 out of http://www.w3.org/TR/emotion-voc/xml
            </summary>
        </member>
        <member name="M:Syn.EmotionML.ActionTendency.#ctor(System.String)">
            <summary>
            Initializes a new instances of <see cref="T:Syn.EmotionML.ActionTendency"/>
            </summary>
            <param name="name"></param>
        </member>
        <member name="F:Syn.EmotionML.Appraisal.AppraisalOcc">
            <summary>
            Vocabularies for appraisals of EmotionML 1.0 out of http://www.w3.org/TR/emotion-voc/xml
            </summary>
        </member>
        <member name="F:Syn.EmotionML.Category.CategoryBig6">
            <summary>
            Vocabularies for categories of EmotionML 1.0 out of http://www.w3.org/TR/emotion-voc/xml
            </summary>
        </member>
        <member name="F:Syn.EmotionML.Dimension.DimensionPad">
            <summary>
            Vocabularies for dimensions of EmotionML 1.0 out of http://www.w3.org/TR/emotion-voc/xml
            </summary>
        </member>
        <member name="F:Syn.EmotionML.Emotion._id">
            <summary>
            unique id of emotion annotation
            </summary>
        </member>
        <member name="F:Syn.EmotionML.Emotion.version">
            <summary>
            version of EmotionML
            optional if you set it in surrounding <emotionml/> tag
            </summary>
        </member>
        <member name="F:Syn.EmotionML.Emotion.expressedThrough">
            <summary>
            modality throught which an emotion is produced
            space delimeted set of values
            </summary>
        </member>
        <member name="F:Syn.EmotionML.Emotion.start">
            <summary>
            denote the starting time of emotion
            milliseconds since 1970-01-01 0:00:00 GMT (xsd:nonNegativeInteger)
            </summary>
        </member>
        <member name="F:Syn.EmotionML.Emotion.end">
            <summary>
            denote the ending time of emotion
            milliseconds since 1970-01-01 0:00:00 GMT (xsd:nonNegativeInteger)
            </summary>
        </member>
        <member name="F:Syn.EmotionML.Emotion.duration">
            <summary>
            duration of the event in milliseconds (xsd:nonNegativeInteger)
            </summary>
        </member>
        <member name="F:Syn.EmotionML.Emotion.timeRefAnchorPoint">
            <summary>
            indicates from wich time the relative time is measured (start=default or end)
            </summary>
        </member>
        <member name="F:Syn.EmotionML.Emotion.offsetToStart">
            <summary>
            offset in milliseconds for the start of input from the anchor point
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Emotion.SetDefaultSets">
            <summary>
            sets a default category-set, dimension-set, appraisal-set and action-tendency-set
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Emotion.AddCategory(Syn.EmotionML.Category)">
            <summary>
            modify the values of a category, adds it if doesn't exist
            </summary>
            <param name="newCategory">the values to set the category to</param>
        </member>
        <member name="M:Syn.EmotionML.Emotion.RemoveCategory(System.String)">
            <summary>
            deletes a category by name
            </summary>
            <param name="categoryName">the name of the category to delete</param>
            <returns>deletion succeded</returns>
        </member>
        <member name="M:Syn.EmotionML.Emotion.AddDimension(Syn.EmotionML.Dimension)">
            <summary>
            modify the values of a dimension, adds it if not exists
            </summary>
            <param name="newDimension">the values to set the dimension to</param>
        </member>
        <member name="M:Syn.EmotionML.Emotion.RemoveDimension(System.String)">
            <summary>
            deletes a dimension by name
            </summary>
            <param name="dimensionName">the name of the dimension to delete</param>
            <returns>deletion succeded</returns>
        </member>
        <member name="M:Syn.EmotionML.Emotion.AddAppraisal(Syn.EmotionML.Appraisal)">
            <summary>
            modify the values of a appraisal, adds it if not exists
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Emotion.RemoveAppraisal(System.String)">
            <summary>
            deletes a appraisal by name
            </summary>
            <param name="appraisalName">the name of the appraisal to delete</param>
            <returns>deletion succeded</returns>
        </member>
        <member name="M:Syn.EmotionML.Emotion.AddActionTendency(Syn.EmotionML.ActionTendency)">
            <summary>
            modify the values of a actionTendency, adds it if not exists
            </summary>
            <param name="newActionTendency">the values to set the actionTendency to</param>
        </member>
        <member name="M:Syn.EmotionML.Emotion.RemoveActionTendency(System.String)">
            <summary>
            deletes a actionTendency by name
            </summary>
            <param name="actionTendencyName">the name of the actionTendency to delete</param>
            <returns>deletion succeded</returns>
        </member>
        <member name="M:Syn.EmotionML.Emotion.AddReference(Syn.EmotionML.Reference)">
            <summary>
            adds a reference for emotion annotation
            </summary>
            <param name="newReference">the reference URL</param>
        </member>
        <member name="M:Syn.EmotionML.Emotion.RemoveReference(Syn.EmotionML.Reference)">
            <summary>
            deletes a reference by value
            </summary>
            <returns>deletion succeded</returns>
        </member>
        <member name="M:Syn.EmotionML.Emotion.MergeWith(Syn.EmotionML.Emotion)">
            <summary>
            merges this emotion with another emotion annnotation
            </summary>
            <param name="mergingEmotion">emotion to integrate in this emotion</param>
        </member>
        <member name="M:Syn.EmotionML.Emotion.ElementNode">
            <summary>
            creates a DOM of Emotion
            </summary>
            <returns>DOM of emotion definition</returns>
        </member>
        <member name="F:Syn.EmotionML.EmotionML.Namespace">
            <summary>
            Namespace for EmotionML 1.0
            </summary>
        </member>
        <member name="F:Syn.EmotionML.EmotionML.Praefix">
            <summary>
            recommented XML-prefix of EmotionML
            </summary>
        </member>
        <member name="F:Syn.EmotionML.EmotionML.MimeType">
            <summary>
            MIME type of EmotionML
            </summary>
        </member>
        <member name="F:Syn.EmotionML.EmotionML.FileExtension">
            <summary>
            File-extension of EmotionML
            </summary>
        </member>
        <member name="F:Syn.EmotionML.EmotionML.Version">
            <summary>
            Version of highest EmotionML-Recommendation
            </summary>
        </member>
        <member name="F:Syn.EmotionML.EmotionML.LibraryVersion">
            <summary>
            Version of this EmotionML-Library
            </summary>
        </member>
        <member name="F:Syn.EmotionML.EmotionML.Versions">
            <summary>
            Versions of all EmotionML Recommendations
            </summary>
        </member>
        <member name="F:Syn.EmotionML.EmotionMLDocument._version">
            <summary>
            version of EmotionML
            if you do not set it here, it must be set in <emotion/> tag
            </summary>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLDocument.AddVocabulary(Syn.EmotionML.Vocabulary)">
            <summary>
            adds an vocabulary to document
            </summary>
            <param name="vocabulary">defined emotion vocabulary</param>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLDocument.AddEmotion(Syn.EmotionML.Emotion)">
            <summary>
            adds an emotion to document
            </summary>
            <param name="emotion">the emotion</param>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLDocument.ElementNode">
            <summary>
            creates a DOM-list of emotions in list
            </summary>
            <returns>DOM of emotionml notation</returns>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLDocument.CategorySet">
            <summary>
            category set for categories
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLDocument.DimensionSet">
            <summary>
            dimension set for dimensions
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLDocument.AppraisalSet">
            <summary>
            appraisal set for appraisals
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLDocument.ActionTendencySet">
            <summary>
            action tendency set for action tendencys
            </summary>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLDocument.Version">
            <summary>
            version of EmotionML
            </summary>
        </member>
        <member name="F:Syn.EmotionML.EmotionMLHelper.UserAgent">
            <summary>
            User agent given, when some other EmotionML (e.g. vocabulary, mimetypes) is crawled with this library
            </summary>
        </member>
        <member name="F:Syn.EmotionML.EmotionMLHelper.SchemaTemplate">
            <summary>
            XML Schema template to validate some special types
            </summary>
        </member>
        <member name="F:Syn.EmotionML.EmotionMLHelper.XmlTemplate">
            <summary>
            XML template to validate some special things
            </summary>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLHelper.IsValidXsdId(System.String)">
            <summary>
            validate a string against xsd:ID
            </summary>
            <param name="id">ID to validate</param>
            <returns>ID is a xsd:ID</returns>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLHelper.IsXsdAnyUri(System.String)">
            <summary>
            validate a string against xsd:anyURI
            </summary>
            <returns>URI is a xsd:anyURI</returns>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLHelper.IsNmtokens(System.String)">
            <summary>
            validate a string against xsd:nmtokens
            </summary>
            <param name="token"></param>
            <returns>token is a xsd:nmtokens</returns>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLHelper.ValidateAgainstSchema(System.String,System.String)">
            <summary>
            validates a XML against a XMLSchema
            </summary>
            <param name="xmlString">the XML</param>
            <param name="schemaString">the Schema</param>
            <returns>XML ist valid against XMLSchema</returns>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLHelper.DoubleToString(System.Double)">
            <summary>
            converts double to string without localisation
            </summary>
            <param name="number">double</param>
            <returns>string</returns>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLHelper.DoubleToString(System.Nullable{System.Double})">
            <summary>
            support null for double2string()
            </summary>
            <param name="number">double</param>
            <returns>string</returns>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLHelper.StringToDouble(System.String)">
            <summary>
            converts a string to double without localisation
            </summary>
            <param name="number">string</param>
            <returns>double</returns>
        </member>
        <member name="F:Syn.EmotionML.EmotionMLParser._emotionmlDocument">
            <summary>
            resulted EmotionML document
            </summary>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLParser.Parse(System.String,System.Boolean)">
            <summary>
            parses the whole staff of EmotionML
            </summary>
            <param name="emotionML"></param>
            <param name="ignoreSchema">do not validate input against EmotionML schema</param>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLParser.ParseEmotionML(System.Xml.Linq.XElement)">
            <summary>
            parse general things of <emotionml/>
            </summary>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLParser.ParseVocabulary(System.Xml.Linq.XElement)">
            <summary>
            parses <vocabulary/> area to Vocabulary
            </summary>
            <param name="element">XML node of <vocabulary/></param>
            <returns>vocabulary object</returns>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLParser.ParseEmotion(System.Xml.Linq.XElement)">
            <summary>
            parses <emotion/> area to Emotion
            </summary>
            <param name="element">XML node of <emotion/></param>
            <returns>Emotion object</returns>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLParser.ParseReference(System.Xml.Linq.XElement)">
            <summary>
            parses <reference/> area to Reference
            </summary>
            <param name="element">XML node of <reference/></param>
            <returns>Reference object</returns>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLParser.ParseTrace(System.Xml.Linq.XElement)">
            <summary>
            parses the <trace/> section
            </summary>
            <param name="traceElement">XML node of <trace/></param>
            <returns>Trace object</returns>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLParser.ParseItem(System.Xml.Linq.XElement)">
            <summary>
            parse <item/> to Item
            </summary>
            <param name="itemElement">XML Node of <item/></param>
            <returns>Item object</returns>
        </member>
        <member name="M:Syn.EmotionML.EmotionMLParser.ParseInfo(System.Xml.Linq.XElement)">
            <summary>
            parses the <info/> section
            </summary>
            <param name="infoElement">XML node of <info/></param>
            <returns>Info object</returns>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLParser.Document">
            <summary>
            the whole parsed EmotionML instance
            </summary>
            <returns>EmotionML object</returns>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLParser.Emotions">
            <summary>
            list of all parsed emotions
            </summary>
            <returns>list of emotion instances</returns>
        </member>
        <member name="P:Syn.EmotionML.EmotionMLParser.Vocabularies">
            <summary>
            list of all parsed vocabularies
            </summary>
            <returns></returns>
        </member>
        <member name="F:Syn.EmotionML.Info._id">
            <summary>
            id for this info area
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Item.ElementNode">
            <summary>
            creates a DOM of item
            </summary>
            <returns>XML DOM</returns>
        </member>
        <member name="M:Syn.EmotionML.Reference.ElementNode">
            <summary>
            creates a DOM of reference
            </summary>
            <returns>XML DOM</returns>
        </member>
        <member name="F:Syn.EmotionML.Trace._frequency">
            <summary>
            sampling freuquency in Hz
            </summary>
        </member>
        <member name="F:Syn.EmotionML.Trace._samples">
            <summary>
            numeric scale values from interval [0;1] (changes over time)
            space seperated
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Trace.SetFrequency(System.String)">
            <summary>
            set frequency by frequency-string (within Hz)
            </summary>
            <param name="frequencyValue">frequency string</param>
        </member>
        <member name="M:Syn.EmotionML.Trace.FrequencyText">
            <summary>
            returns frequency as string with Hz
            </summary>
            <returns>frequency string (with Hz)</returns>
        </member>
        <member name="M:Syn.EmotionML.Trace.ElementNode">
            <summary>
            Gets this trace object as an XElement
            </summary>
        </member>
        <member name="F:Syn.EmotionML.Vocabulary._type">
            <summary>
            type of vocabulary (category, dimension, appraisal, action-tendency)
            </summary>
        </member>
        <member name="F:Syn.EmotionML.Vocabulary._id">
            <summary>
            xml:ID of vocabulary
            </summary>
        </member>
        <member name="M:Syn.EmotionML.Vocabulary.AddItem(Syn.EmotionML.Item)">
            <summary>
            adds item to vokabulary
            </summary>
            <param name="newItem"></param>
        </member>
        <member name="M:Syn.EmotionML.Vocabulary.RemoveItem(Syn.EmotionML.Item)">
            <summary>
            removes item from vokabulary
            </summary>
            <param name="itemToRemove"></param>
        </member>
        <member name="M:Syn.EmotionML.Vocabulary.ElementNode">
            <summary>
            creates a DOM of Emotion
            </summary>
            <returns>DOM of emotion definition</returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.JavaScriptEngine.ResetStatementsCount">
            <summary>
            Initializes the statements count
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.JavaScriptEngine.ResetCallStack">
            <summary>
            Initializes list of references of called functions
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.JavaScriptEngine.GetCompletionValue">
            <summary>
            Gets the last evaluated statement completion value
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.JavaScriptEngine.GetValue(System.Object)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.7.1
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.JavaScriptEngine.PutValue(Syn.Bot.Plugins.JavaScript.Runtime.References.Reference,Syn.Bot.Plugins.JavaScript.Native.JsValue)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.7.2
            </summary>
            <param name="reference"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.JavaScriptEngine.PutPrimitiveBase(Syn.Bot.Plugins.JavaScript.Native.JsValue,System.String,Syn.Bot.Plugins.JavaScript.Native.JsValue,System.Boolean)">
            <summary>
            Used by PutValue when the reference has a primitive base value
            </summary>
            <param name="b"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="throwOnError"></param>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.JavaScriptEngine.Invoke(System.String,System.Object[])">
            <summary>
            Invoke the current value as function.
            </summary>
            <param name="propertyName">The arguments of the function call.</param>
            <returns>The value returned by the function call.</returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.JavaScriptEngine.Invoke(System.String,System.Object,System.Object[])">
            <summary>
            Invoke the current value as function.
            </summary>
            <param name="propertyName">The name of the function to call.</param>
            <param name="thisObj">The this value inside the function call.</param>
            <param name="arguments">The arguments of the function call.</param>
            <returns>The value returned by the function call.</returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.JavaScriptEngine.GetValue(System.String)">
            <summary>
            Gets a named value from the Global scope.
            </summary>
            <param name="propertyName">The name of the property to return.</param>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.JavaScriptEngine.GetLastSyntaxNode">
            <summary>
            Gets the last evaluated <see cref="T:Syn.Bot.Plugins.JavaScript.Parser.Ast.SyntaxNode"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.JavaScriptEngine.GetValue(Syn.Bot.Plugins.JavaScript.Native.JsValue,System.String)">
            <summary>
            Gets a named value from the specified scope.
            </summary>
            <param name="scope">The scope to get the property from.</param>
            <param name="propertyName">The name of the property to return.</param>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Native.Argument.ArgumentsInstance">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-10.6
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Object.ObjectInstance.Get(System.String)">
            <summary>
            Returns the value of the named property.
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.12.3
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Object.ObjectInstance.GetOwnProperty(System.String)">
            <summary>
            Returns the Property Descriptor of the named 
            own property of this object, or undefined if 
            absent.
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.12.1
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Object.ObjectInstance.GetProperty(System.String)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.12.2
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Object.ObjectInstance.Put(System.String,Syn.Bot.Plugins.JavaScript.Native.JsValue,System.Boolean)">
            <summary>
            Sets the specified named property to the value 
            of the second parameter. The flag controls 
            failure handling.
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="throwOnError"></param>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Object.ObjectInstance.CanPut(System.String)">
            <summary>
            Returns a Boolean value indicating whether a 
            [[Put]] operation with PropertyName can be 
            performed.
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.12.4
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Object.ObjectInstance.HasProperty(System.String)">
            <summary>
            Returns a Boolean value indicating whether the 
            object already has a property with the given 
            name.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Object.ObjectInstance.Delete(System.String,System.Boolean)">
            <summary>
            Removes the specified named own property 
            from the object. The flag controls failure 
            handling.
            </summary>
            <param name="propertyName"></param>
            <param name="throwOnError"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Object.ObjectInstance.DefaultValue(Syn.Bot.Plugins.JavaScript.Runtime.Types)">
            <summary>
            Hint is a String. Returns a default value for the 
            object.
            </summary>
            <param name="hint"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Object.ObjectInstance.DefineOwnProperty(System.String,Syn.Bot.Plugins.JavaScript.Runtime.Descriptors.PropertyDescriptor,System.Boolean)">
            <summary>
            Creates or alters the named own property to 
            have the state described by a Property 
            Descriptor. The flag controls failure handling.
            </summary>
            <param name="propertyName"></param>
            <param name="desc"></param>
            <param name="throwOnError"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Object.ObjectInstance.FastAddProperty(System.String,Syn.Bot.Plugins.JavaScript.Native.JsValue,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Optimized version of [[Put]] when the property is known to be undeclared already
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="writable"></param>
            <param name="configurable"></param>
            <param name="enumerable"></param>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Object.ObjectInstance.FastSetProperty(System.String,Syn.Bot.Plugins.JavaScript.Runtime.Descriptors.PropertyDescriptor)">
            <summary>
            Optimized version of [[Put]] when the property is known to be already declared 
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:Syn.Bot.Plugins.JavaScript.Native.Object.ObjectInstance.Prototype">
            <summary>
            The prototype of this object.
            </summary>
        </member>
        <member name="P:Syn.Bot.Plugins.JavaScript.Native.Object.ObjectInstance.Extensible">
            <summary>
            If true, own properties may be added to the 
            object.
            </summary>
        </member>
        <member name="P:Syn.Bot.Plugins.JavaScript.Native.Object.ObjectInstance.Class">
            <summary>
            A String value indicating a specification defined 
            classification of objects.
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Function.FunctionInstance.Call(Syn.Bot.Plugins.JavaScript.Native.JsValue,Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            Executed when a function object is used as a function
            </summary>
            <param name="thisObject"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Function.FunctionInstance.Get(System.String)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.5.4
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Native.Array.ArrayPrototype">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Boolean.BooleanConstructor.Construct(Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.2.1
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Native.Boolean.BooleanPrototype">
            <summary>
                http://www.ecma-international.org/ecma-262/5.1/#sec-15.6.4
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Date.DateConstructor.Construct(Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.3
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Native.Date.DatePrototype">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Date.DatePrototype.Day(System.Double)">
            <summary>
            15.9.1.2
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Date.DatePrototype.TimeWithinDay(System.Double)">
            <summary>
            15.9.1.2
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Date.DatePrototype.DaysInYear(System.Double)">
            <summary>
            The number of days in a year
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Date.DatePrototype.DayFromYear(System.Double)">
            <summary>
            The day number of the first day of the year.
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Date.DatePrototype.TimeFromYear(System.Double)">
            <summary>
            The time value of the start of the year
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Date.DatePrototype.YearFromTime(System.Double)">
            <summary>
            The year of a time value.
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Date.DatePrototype.InLeapYear(System.Double)">
            <summary>
            <value>true</value> if the time is within a leap year, <value>false</value> otherwise
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Date.DatePrototype.MonthFromTime(System.Double)">
            <summary>
            The month number of a time value.
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Date.DatePrototype.WeekDay(System.Double)">
            <summary>
            The weekday for a particular time value.
            </summary>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Native.Error.ErrorPrototype">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.11.4
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Function.FunctionConstructor.CreateFunctionObject(Syn.Bot.Plugins.JavaScript.Parser.Ast.FunctionDeclaration)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-13.2
            </summary>
            <param name="functionDeclaration"></param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Native.Function.FunctionPrototype">
            <summary>
                http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4
            </summary>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Native.Function.ScriptFunctionInstance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Function.ScriptFunctionInstance.#ctor(Syn.Bot.Plugins.JavaScript.JavaScriptEngine,Syn.Bot.Plugins.JavaScript.Parser.IFunctionDeclaration,Syn.Bot.Plugins.JavaScript.Runtime.Environments.LexicalEnvironment,System.Boolean)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-13.2
            </summary>
            <param name="engine"></param>
            <param name="functionDeclaration"></param>
            <param name="scope"></param>
            <param name="strict"></param>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Function.ScriptFunctionInstance.Call(Syn.Bot.Plugins.JavaScript.Native.JsValue,Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-13.2.1
            </summary>
            <param name="thisArg"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Function.ScriptFunctionInstance.Construct(Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-13.2.2
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Global.GlobalObject.ParseInt(Syn.Bot.Plugins.JavaScript.Native.JsValue,Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.2
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Global.GlobalObject.ParseFloat(Syn.Bot.Plugins.JavaScript.Native.JsValue,Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.3
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Global.GlobalObject.IsNaN(Syn.Bot.Plugins.JavaScript.Native.JsValue,Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.4
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Global.GlobalObject.IsFinite(Syn.Bot.Plugins.JavaScript.Native.JsValue,Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.5
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Global.GlobalObject.EncodeUri(Syn.Bot.Plugins.JavaScript.Native.JsValue,Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3.2
            </summary>
            <param name="thisObject"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Global.GlobalObject.EncodeUriComponent(Syn.Bot.Plugins.JavaScript.Native.JsValue,Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3.4
            </summary>
            <param name="thisObject"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Json.JsonParser.ParseJsonValue">
            <summary>
            Optimization.
            By calling Lex().Value for each type, we parse the token twice.
            It was already parsed by the peek() method.
            _lookahead.Value already contain the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.JsValue.FromObject(Syn.Bot.Plugins.JavaScript.JavaScriptEngine,System.Object)">
            <summary>
            Creates a valid <see cref="T:Syn.Bot.Plugins.JavaScript.Native.JsValue"/> instance from any <see cref="N:Syn.Bot.Plugins.JavaScript.Native.Object"/> instance
            </summary>
            <param name="engine"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.JsValue.ToObject">
            <summary>
            Converts a <see cref="T:Syn.Bot.Plugins.JavaScript.Native.JsValue"/> to its underlying CLR value.
            </summary>
            <returns>The underlying CLR value of the <see cref="T:Syn.Bot.Plugins.JavaScript.Native.JsValue"/> instance.</returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.JsValue.Invoke(Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            Invoke the current value as function.
            </summary>
            <param name="arguments">The arguments of the function call.</param>
            <returns>The value returned by the function call.</returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.JsValue.Invoke(Syn.Bot.Plugins.JavaScript.Native.JsValue,Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            Invoke the current value as function.
            </summary>
            <param name="thisObj">The this value inside the function call.</param>
            <param name="arguments">The arguments of the function call.</param>
            <returns>The value returned by the function call.</returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Number.NumberConstructor.Construct(Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.2.1
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Native.Number.NumberPrototype">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.4
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Object.ObjectConstructor.Call(Syn.Bot.Plugins.JavaScript.Native.JsValue,Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.1.1
            </summary>
            <param name="thisObject"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Object.ObjectConstructor.Construct(Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.2.1
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Object.ObjectPrototype.ToObjectString(Syn.Bot.Plugins.JavaScript.Native.JsValue,Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.4.2
            </summary>
            <param name="thisObject"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.Object.ObjectPrototype.HasOwnProperty(Syn.Bot.Plugins.JavaScript.Native.JsValue,Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.4.5
            </summary>
            <param name="thisObject"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.RegExp.RegExpConstructor.Construct(Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.5
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.4
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Native.String.StringConstructor.Construct(Syn.Bot.Plugins.JavaScript.Native.JsValue[])">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.2.1
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Native.String.StringPrototype">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Options.DiscardGlobal(System.Boolean)">
            <summary>
            When called, doesn't initialize the global scope.
            Can be useful in lightweight scripts for performance reason.
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Options.Strict(System.Boolean)">
            <summary>
            Run the script in strict mode.
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Options.AllowDebuggerStatement(System.Boolean)">
            <summary>
            Allow the <code>debugger</code> statement to be called in a script.
            </summary>
            <remarks>
            Because the <code>debugger</code> statement can start the 
            Visual Studio debugger, is it disabled by default
            </remarks>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Options.AddObjectConverter(Syn.Bot.Plugins.JavaScript.Runtime.Interop.IObjectConverter)">
            <summary>
            Adds a <see cref="T:Syn.Bot.Plugins.JavaScript.Runtime.Interop.IObjectConverter"/> instance to convert CLR types to <see cref="T:Syn.Bot.Plugins.JavaScript.Native.JsValue"/>
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Options.AllowClr(System.Reflection.Assembly[])">
            <summary>
            Allows scripts to call CLR types directly like <example>System.IO.File</example>
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Options.LimitRecursion(System.Int32)">
            <summary>
            Sets maximum allowed depth of recursion.
            </summary>
            <param name="maxRecursionDepth">
            The allowed depth.
            a) In case max depth is zero no recursion is allowed.
            b) In case max depth is equal to n it means that in one scope function can be called no more than n times.
            </param>
            <returns>Options instance for fluent syntax</returns>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Parser.IFunctionScope">
            <summary>
            Used to safe references to all function delcarations in a specific scope.
            </summary>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Parser.IVariableScope">
            <summary>
            Used to safe references to all variable delcarations in a specific scope.
            Hoisting.
            </summary>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Parser.Ast.IPropertyKeyExpression">
            <summary>
            Reprensents an expression which can be a key of a Property
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.Arguments.At(Syn.Bot.Plugins.JavaScript.Native.JsValue[],System.Int32,Syn.Bot.Plugins.JavaScript.Native.JsValue)">
            <summary>
            Returns the arguments at the provided position or Undefined if not present
            </summary>
            <param name="args"></param>
            <param name="index">The index of the parameter to return</param>
            <param name="undefinedValue">The value to return is the parameter is not provided</param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Runtime.Completion">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.9
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.Descriptors.PropertyDescriptor.IsGenericDescriptor">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.10.3
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Runtime.Environments.DeclarativeEnvironmentRecord">
            <summary>
            Represents a declarative environment record
            http://www.ecma-international.org/ecma-262/5.1/#sec-10.2.1.1
            </summary>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Runtime.Environments.EnvironmentRecord">
            <summary>
            Base implementation of an Environment Record
            http://www.ecma-international.org/ecma-262/5.1/#sec-10.2.1
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.Environments.EnvironmentRecord.HasBinding(System.String)">
            <summary>
            Determines if an environment record has a binding for an identifier. 
            </summary>
            <param name="name">The identifier of the binding</param>
            <returns><c>true</c> if it does and <c>false</c> if it does not.</returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.Environments.EnvironmentRecord.CreateMutableBinding(System.String,System.Boolean)">
            <summary>
            Creates a new mutable binding in an environment record.
            </summary>
            <param name="name">The identifier of the binding.</param>
            <param name="canBeDeleted"><c>true</c> if the binding may be subsequently deleted.</param>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.Environments.EnvironmentRecord.SetMutableBinding(System.String,Syn.Bot.Plugins.JavaScript.Native.JsValue,System.Boolean)">
            <summary>
            Sets the value of an already existing mutable binding in an environment record. 
            </summary>
            <param name="name">The identifier of the binding</param>
            <param name="value">The value of the binding.</param>
            <param name="strict">The identify strict mode references.</param>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.Environments.EnvironmentRecord.GetBindingValue(System.String,System.Boolean)">
            <summary>
            Returns the value of an already existing binding from an environment record. 
            </summary>
            <param name="name">The identifier of the binding</param>
            <param name="strict">The identify strict mode references.</param>
            <return>The value of an already existing binding from an environment record.</return>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.Environments.EnvironmentRecord.DeleteBinding(System.String)">
            <summary>
            Delete a binding from an environment record. The String value N is the text of the bound name If a binding for N exists, remove the binding and return true. If the binding exists but cannot be removed return false. If the binding does not exist return true.
            </summary>
            <param name="name">The identifier of the binding</param>
            <returns><true>true</true> if the deletion is successfull.</returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.Environments.EnvironmentRecord.ImplicitThisValue">
            <summary>
            Returns the value to use as the <c>this</c> value on calls to function objects that are obtained as binding values from this environment record.
            </summary>
            <returns>The value to use as <c>this</c>.</returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.Environments.DeclarativeEnvironmentRecord.CreateImmutableBinding(System.String)">
            <summary>
            Creates a new but uninitialised immutable binding in an environment record.
            </summary>
            <param name="name">The identifier of the binding.</param>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.Environments.DeclarativeEnvironmentRecord.InitializeImmutableBinding(System.String,Syn.Bot.Plugins.JavaScript.Native.JsValue)">
            <summary>
            Sets the value of an already existing but uninitialised immutable binding in an environment record.
            </summary>
            <param name="name">The identifier of the binding.</param>
            <param name="value">The value of the binding.</param>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Runtime.Environments.LexicalEnvironment">
            <summary>
            Represents a Liexical Environment (a.k.a Scope)
            http://www.ecma-international.org/ecma-262/5.1/#sec-10.2
            http://www.ecma-international.org/ecma-262/5.1/#sec-10.2.2
            </summary>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Runtime.Environments.ObjectEnvironmentRecord">
            <summary>
            Represents an object environment record
            http://www.ecma-international.org/ecma-262/5.1/#sec-10.2.1.2
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.Environments.ObjectEnvironmentRecord.CreateMutableBinding(System.String,System.Boolean)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-10.2.1.2.2
            </summary>
            <param name="name"></param>
            <param name="configurable"></param>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.ExpressionInterpreter.EvaluateMemberExpression(Syn.Bot.Plugins.JavaScript.Parser.Ast.MemberExpression)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-11.2.1
            </summary>
            <param name="memberExpression"></param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Runtime.Interop.ClrFunctionInstance">
            <summary>
            Wraps a Clr method into a FunctionInstance
            </summary>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Runtime.Interop.DelegateWrapper">
            <summary>
            Represents a FunctionInstance wrapper around a CLR method. This is used by user to pass
            custom methods to the engine.
            </summary>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Runtime.Interop.GetterFunctionInstance">
            <summary>
            Represents a FunctionInstance wrapping a Clr getter.
            </summary>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Runtime.Interop.IObjectConverter">
            <summary>
            When implemented, converts a CLR value to a <see cref="T:Syn.Bot.Plugins.JavaScript.Native.JsValue"/> instance
            </summary>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Runtime.Interop.NamespaceReference">
            <summary>
            Any instance on this class represents a reference to a CLR namespace.
            Accessing its properties will look for a class of the full name, or instantiate
            a new <see cref="T:Syn.Bot.Plugins.JavaScript.Runtime.Interop.NamespaceReference"/> as it assumes that the property is a deeper
            level of the current namespace
            </summary>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Runtime.Interop.ObjectWrapper">
            <summary>
            Wraps a CLR instance
            </summary>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Runtime.Interop.SetterFunctionInstance">
            <summary>
            Represents a FunctionInstance wrapping a Clr setter.
            </summary>
        </member>
        <member name="T:Syn.Bot.Plugins.JavaScript.Runtime.References.Reference">
            <summary>
            Represents the Reference Specification Type
            http://www.ecma-international.org/ecma-262/5.1/#sec-8.7
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.StatementInterpreter.ExecuteDoWhileStatement(Syn.Bot.Plugins.JavaScript.Parser.Ast.DoWhileStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.6.1
            </summary>
            <param name="doWhileStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.StatementInterpreter.ExecuteWhileStatement(Syn.Bot.Plugins.JavaScript.Parser.Ast.WhileStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.6.2
            </summary>
            <param name="whileStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.StatementInterpreter.ExecuteForStatement(Syn.Bot.Plugins.JavaScript.Parser.Ast.ForStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.6.3
            </summary>
            <param name="forStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.StatementInterpreter.ExecuteForInStatement(Syn.Bot.Plugins.JavaScript.Parser.Ast.ForInStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.6.4
            </summary>
            <param name="forInStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.StatementInterpreter.ExecuteContinueStatement(Syn.Bot.Plugins.JavaScript.Parser.Ast.ContinueStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.7
            </summary>
            <param name="continueStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.StatementInterpreter.ExecuteBreakStatement(Syn.Bot.Plugins.JavaScript.Parser.Ast.BreakStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.8
            </summary>
            <param name="breakStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.StatementInterpreter.ExecuteReturnStatement(Syn.Bot.Plugins.JavaScript.Parser.Ast.ReturnStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.9
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.StatementInterpreter.ExecuteWithStatement(Syn.Bot.Plugins.JavaScript.WithStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.10
            </summary>
            <param name="withStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.StatementInterpreter.ExecuteSwitchStatement(Syn.Bot.Plugins.JavaScript.Parser.Ast.SwitchStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.11
            </summary>
            <param name="switchStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.StatementInterpreter.ExecuteThrowStatement(Syn.Bot.Plugins.JavaScript.Parser.Ast.ThrowStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.13
            </summary>
            <param name="throwStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.StatementInterpreter.ExecuteTryStatement(Syn.Bot.Plugins.JavaScript.Parser.Ast.TryStatement)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-12.14
            </summary>
            <param name="tryStatement"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.TypeConverter.ToPrimitive(Syn.Bot.Plugins.JavaScript.Native.JsValue,Syn.Bot.Plugins.JavaScript.Runtime.Types)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-9.1
            </summary>
            <param name="input"></param>
            <param name="preferredType"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.TypeConverter.ToBoolean(Syn.Bot.Plugins.JavaScript.Native.JsValue)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-9.2
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.TypeConverter.ToNumber(Syn.Bot.Plugins.JavaScript.Native.JsValue)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-9.3
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.TypeConverter.ToInteger(Syn.Bot.Plugins.JavaScript.Native.JsValue)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-9.4
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.TypeConverter.ToInt32(Syn.Bot.Plugins.JavaScript.Native.JsValue)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-9.5
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.TypeConverter.ToUint32(Syn.Bot.Plugins.JavaScript.Native.JsValue)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-9.6
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.TypeConverter.ToUint16(Syn.Bot.Plugins.JavaScript.Native.JsValue)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-9.7
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Plugins.JavaScript.Runtime.TypeConverter.ToString(Syn.Bot.Plugins.JavaScript.Native.JsValue)">
            <summary>
            http://www.ecma-international.org/ecma-262/5.1/#sec-9.8
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.BotConfiguration">
            <summary>
            A pre-load configuration class for Syn Bot.
            </summary>
        </member>
        <member name="M:Syn.Bot.BotConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.BotConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.LicenseKey">
            <summary>
            Gets or sets the license key.
            </summary>
            <value>
            The license key.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.BotID">
            <summary>
            Gets or sets the unique ID for the Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.CacheManager">
            <summary>
            Gets or sets the cache manager.
            </summary>
            <value>
            Any valid implementation of ICacheManager.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.AllowRegex">
            <summary>
            Gets or sets a value indicating whether regular expressions are allowed.
            </summary>
            <value>
              <c>true</c> if regular expressions are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.AllowSets">
            <summary>
            Gets or sets a value indicating whether Sets are allowed.
            </summary>
            <value>
              <c>true</c> if sets are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.AllowMaps">
            <summary>
            Gets or sets a value indicating whether Maps are allowed.
            </summary>
            <value>
              <c>true</c> if Maps are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.AllowFilters">
            <summary>
            Gets or sets a value indicating whether filters are allowed.
            </summary>
            <value>
              <c>true</c> if filters are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.AllowJavaScript">
            <summary>
            Gets or sets a value indicating whether JavaScript is allowed.
            </summary>
            <value>
              <c>true</c> if JavaScript is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.AllowStacking">
            <summary>
            Gets or sets a value indicating whether Stack frames should be stored.
            </summary>
            <value>
              <c>true</c> if Stack frames are to be stored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.AllowEmotions">
            <summary>
            Gets or sets a value indicating whether emotions are allowed.
            </summary>
            <value>
              <c>true</c> if emotions are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.AllowConditionsInPattern">
            <summary>
            Gets or sets a value indicating whether <c>If</c> conditions are allowed within <c>Patterns</c>
            </summary>
            <value>
            <c>true</c> if <c>If</c> conditions are allowed within <c>Patterns</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.AllowConditionsInPublicPattern">
            <summary>
            Gets or sets a value indicating whether <c>If</c> conditions are allowed in Public <c>Patterns</c>
            </summary>
            <value>
            <c>true</c> if <c>If</c> conditions are allowed within Public <c>Patterns</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.AllowScriptsInPattern">
            <summary>
            Gets or sets a value indicating whether scripts are allowed within <c>Patterns</c>.
            </summary>
            <value>
            <c>true</c> if scripts are allowed in <c>Patterns</c> ; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.AllowPublicScriptsInPattern">
            <summary>
            Gets or sets a value indicating whether scripts are allowed in public <c>Patterns</c>.
            </summary>
            <value>
            <c>true</c> if scripts are allowed in public <c>Patterns</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.AllowLearning">
            <summary>
            Gets or sets a value indicating whether the Bot is allowed to store Models in its Master <see cref="T:Syn.Bot.Graph.GraphNode"/>.
            </summary>
            <value>
              <c>true</c> if Models can be stored in the Master <see cref="T:Syn.Bot.Graph.GraphNode"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.AllowRemembering">
            <summary>
            Gets or sets a value indicating whether Models can be stored in User's <see cref="T:Syn.Bot.Graph.GraphNode"/>.
            </summary>
            <value>
              <c>true</c> if Models can be stored in the User's <see cref="T:Syn.Bot.Graph.GraphNode"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.ParentBot">
            <summary>
            Gets or sets the parent bot.
            </summary>
            <value>
            The parent bot.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.HasParent">
            <summary>
            Gets a value indicating whether the bot has a parent.
            </summary>
            <value>
            <c>true</c> if this bot has a parent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.UseParentFilters">
            <summary>
            Gets or sets a value indicating whether parent's Filters are accessible.
            </summary>
            <value>
              <c>true</c> if parent's Filters can be used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.UseParentSplitters">
            <summary>
            Gets or sets a value indicating whether to use Parent's splitters.
            </summary>
            <value>
              <c>true</c> if parent splitters are to be used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.UseParentMaps">
            <summary>
            Gets or sets a value indicating whether parent's Maps accessible.
            </summary>
            <value>
              <c>true</c> if parent's Maps are accessible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.UseParentRegex">
            <summary>
            Gets or sets a value indicating whether parent's regular expressions are accessible.
            </summary>
            <value>
              <c>true</c> if parent's regular expressions are accessible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.UseParentSets">
            <summary>
            Gets or sets a value indicating whether parent's Sets are accessible.
            </summary>
            <value>
              <c>true</c> if parent's Sets are accessible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.UseParentRandoms">
            <summary>
            Gets or sets a value indicating whether parent's random collection is accessible.
            </summary>
            <value>
              <c>true</c> if parent's random collection is accessible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.UseParentPhrases">
            <summary>
            Gets or sets a value indicating whether parent's phrase collection is accessible.
            </summary>
            <value>
              <c>true</c> if parent's phrase collection is accessible.; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.UserHistoryLimit">
            <summary>
            Gets or sets the number of Chat requests and Chat results to be stored in user history.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.ModelLimit">
            <summary>
            Gets or sets the maximum number of Models that can be stored in the Bot's Master <see cref="T:Syn.Bot.Graph.GraphNode"/>
            </summary>
            <value>
            <see cref="F:System.Int32.MaxValue"/> by default.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.SetLimit">
            <summary>
            Gets or sets the maximum number of Set elements that can be stored by the Bot's <see cref="T:Syn.Bot.Collections.SetCollection"/>
            </summary>
            <value>
            <see cref="F:System.Int32.MaxValue"/> by default.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.MapLimit">
            <summary>
            Gets or sets the maximum number of Map elements that can be stored in the Bot's <see cref="T:Syn.Bot.Collections.MapCollection"/>
            </summary>
            <value>
            <see cref="F:System.Int32.MaxValue"/> by default.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.FilterLimit">
            <summary>
            Gets or sets the maximum number of Filter elements that can be stored in the Bot's <see cref="T:Syn.Bot.Collections.FilterCollection"/>
            </summary>
            <value>
            <see cref="F:System.Int32.MaxValue"/> by default.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.SplitterLimit">
            <summary>
            Gets or sets the maximum number of Splitter elements that be stored in the Bot's <see cref="T:Syn.Bot.Collections.SplitterCollection"/>
            </summary>
            <value>
            <see cref="F:System.Int32.MaxValue"/> by default.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.RegexLimit">
            <summary>
            Gets or sets the maximum number of regular expressions that be stored in the Bot's <see cref="T:Syn.Bot.Collections.RegexCollection"/>
            </summary>
            <value>
            <see cref="F:System.Int32.MaxValue"/> by default.
            </value>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.MaxUserIdleTime">
            <summary>
            Gets or sets the maximum user idle time after which the user history begins to clear up.
            </summary>
            <value>
            The maximum user idle time.
            </value>
            <remarks>The default value is 31 Days.</remarks>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.MaxBotIdleTime">
            <summary>
            Gets or sets the maximum time span after which a Bot is declared idle.
            </summary>
            <remarks>The default value is 31 Days.</remarks>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.BotTimeout">
            <summary>
            Gets or sets the maximum time span beyond which a chat request is timed out.
            </summary>
            <remarks>The default value is 1 Minute</remarks>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.Encoding">
            <summary>
            Gets or sets the encoding to be used by this Bot for textual transformations.
            </summary>
            <value>
            The encoding.
            </value>
            <remarks>The default value is UTF-8 encoding.</remarks>
        </member>
        <member name="P:Syn.Bot.BotConfiguration.StoreExamples">
            <summary>
            Gets or sets a value indicating whether to store atomic patterns.
            </summary>
            <value>
              <c>true</c> if atomic patterns are to be stored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syn.Bot.BotStats">
            <summary>
            A container class used to store Bot statistics.
            </summary>
        </member>
        <member name="M:Syn.Bot.BotStats.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Syn.Bot.BotStats.IdleTime">
            <summary>
            Gets a value indicating how long the Bot was Idle.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotStats.Vocabulary">
            <summary>
            Number of Tokens known to the Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotStats.ModelCount">
            <summary>
            Total number of Models known.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotStats.ConceptCount">
            <summary>
            Total number of Concepts known.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotStats.PublicConceptCount">
            <summary>
            Total number of Public Concepts known.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotStats.PrivateConceptCount">
            <summary>
            Total number of Concept Concepts known.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotStats.Interactions">
            <summary>
            Gets the total number of Chat requests this Bot has processed.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotStats.LoadTime">
            <summary>
            Gets the time in Milliseconds taken to load the Bot Package.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotStats.FilterationTime">
            <summary>
            Gets the average filtration time in milliseconds.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotStats.MappingTime">
            <summary>
            Gets the average mapping time in milliseconds.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotStats.SplittingTime">
            <summary>
            Gets the average time taken in milliseconds to split user message into multiple sentences.
            </summary>
        </member>
        <member name="T:Syn.Bot.FilterTarget">
            <summary>
            Provides enumerated values to determine the target of filtration.
            </summary>
        </member>
        <member name="F:Syn.Bot.FilterTarget.Input">
            <summary>
            Targets user input
            </summary>
        </member>
        <member name="F:Syn.Bot.FilterTarget.Output">
            <summary>
            Targets user and bot output
            </summary>
        </member>
        <member name="F:Syn.Bot.FilterTarget.Both">
            <summary>
            Targets both user input and bot output
            </summary>
        </member>
        <member name="T:Syn.Bot.PackageManager">
            <summary>
            Provides functionalities to import an SIML Package into the Bot's <see cref="T:Syn.Bot.Graph.GraphNode"/>
            </summary>
        </member>
        <member name="M:Syn.Bot.PackageManager.LoadFromString(System.String)">
            <summary>
            Loads SIML Package into the Bot's Master <see cref="T:Syn.Bot.Graph.GraphNode"/>
            </summary>
            <param name="packageString">The SIML package string.</param>
        </member>
        <member name="M:Syn.Bot.PackageManager.ConvertToPackage(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Converts a list of SIML elements to an SIML Package.
            </summary>
            <param name="simlElements">SIML elements.</param>
            <returns>An SIML Package as <see cref="T:System.String"/></returns>
            <remarks>This SIML Package should be stored in a file with .SimlPk extension</remarks>
        </member>
        <member name="T:Syn.Bot.RepeatManager">
            <summary>
            Represents a repeat management system.
            </summary>
        </member>
        <member name="M:Syn.Bot.RepeatManager.AddRepeat(System.Xml.Linq.XElement)">
            <summary>
            Adds the repeat element to this manager.
            </summary>
            <param name="repeatElement">The repeat element.</param>
        </member>
        <member name="M:Syn.Bot.RepeatManager.CheckRepetition(Syn.Bot.ChatResult,Syn.Bot.ChatRequest)">
            <summary>
            Checks the repetition of non-repeatable Models.
            </summary>
            <param name="chatResult">The chat result.</param>
            <param name="chatRequest">The chat request.</param>
        </member>
        <member name="T:Syn.Bot.RequestType">
            <summary>
            Provides enumerated values to determine the type of <see cref="T:Syn.Bot.ChatRequest"/> made.
            </summary>
        </member>
        <member name="F:Syn.Bot.RequestType.UserMessage">
            <summary>
            User message submitted by a <see cref="T:Syn.Bot.BotUser"/>
            </summary>
        </member>
        <member name="F:Syn.Bot.RequestType.EventMessage">
            <summary>
            An event message that is triggered when an internal event is fired.
            </summary>
        </member>
        <member name="F:Syn.Bot.RequestType.None">
            <summary>
            Undefined message type.
            </summary>
        </member>
        <member name="T:Syn.Bot.ResultType">
            <summary>
            Provides enumerated values used to determine the type of Result.
            </summary>
        </member>
        <member name="F:Syn.Bot.ResultType.Normal">
            <summary>
            Denotes a Response that is generated after a <see cref="T:Syn.Bot.ChatRequest"/> is successfully evaluated.
            </summary>
        </member>
        <member name="F:Syn.Bot.ResultType.Timedout">
            <summary>
            Denotes a response that is generated when the <see cref="T:Syn.Bot.ChatRequest"/> is timed out.
            </summary>
        </member>
        <member name="F:Syn.Bot.ResultType.Empty">
            <summary>
            Denotes an Empty Response
            </summary>
        </member>
        <member name="T:Syn.Bot.Specification">
            <summary>
            Represents an SIML specification.
            </summary>
        </member>
        <member name="P:Syn.Bot.Specification.Namespace">
            <summary>
            Gets the top-level SIML namespace.
            </summary>
            <value>http://www.syn.co.in/siml</value>
        </member>
        <member name="P:Syn.Bot.Specification.Version">
            <summary>
            Gets the SIML version.
            </summary>
            <value>
            1.0
            </value>
        </member>
        <member name="T:Syn.Bot.SplitterItem">
            <summary>
            Represents an SIML splitter element.
            </summary>
        </member>
        <member name="M:Syn.Bot.SplitterItem.#ctor(Syn.Bot.SplitterType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.SplitterItem"/> class.
            </summary>
            <param name="type">Splitter type.</param>
            <param name="value">Splitting value.</param>
        </member>
        <member name="M:Syn.Bot.SplitterItem.Split(System.Collections.Generic.List{System.String})">
            <summary>
            Splits the specified source string.
            </summary>
            <param name="sourceString">The source string.</param>
            <returns>List of string split using this <see cref="T:Syn.Bot.SplitterItem"/>'s value.</returns>
        </member>
        <member name="P:Syn.Bot.SplitterItem.Type">
            <summary>
            Gets the type of this <see cref="T:Syn.Bot.SplitterItem"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.SplitterItem.Value">
            <summary>
            Gets the splitter value.
            </summary>
        </member>
        <member name="T:Syn.Bot.SplitterType">
            <summary>
            Provides enumerated values that determine the behavior of a <see cref="T:Syn.Bot.SplitterItem"/>
            </summary>
        </member>
        <member name="F:Syn.Bot.SplitterType.Text">
            <summary>
            Textual splitter.
            </summary>
        </member>
        <member name="F:Syn.Bot.SplitterType.Word">
            <summary>
            Word based splitter.
            </summary>
        </member>
        <member name="F:Syn.Bot.SplitterType.Regex">
            <summary>
            Regular Expression based splitter.
            </summary>
        </member>
        <member name="M:Syn.Bot.Classes.TypoGenerator.SwapChars(System.String,System.Int32)">
            <summary>
            SwapChars.
            [Flip 2 chars]
            </summary>
        </member>
        <member name="M:Syn.Bot.Classes.TypoGenerator.RepeatChars(System.String,System.Int32)">
            <summary>
            RepeatChars.
            [Repeat 1 char]
            </summary>
        </member>
        <member name="M:Syn.Bot.Classes.TypoGenerator.DeleteChar(System.String,System.Int32)">
            <summary>
            DeleteChar.
            </summary>
        </member>
        <member name="M:Syn.Bot.Classes.TypoGenerator.ChangeCharIfValue(System.String,System.Int32,System.Char,System.Char)">
            <summary>
            ChangeCharIfValue.
            </summary>
        </member>
        <member name="T:Syn.Bot.Graph.GraphNode">
            <summary>
            Represents an SIML Graph System.
            </summary>
        </member>
        <member name="M:Syn.Bot.Graph.GraphNode.AddTree(Syn.Bot.Graph.ResponseTree,Syn.Bot.SynBot)">
            <summary>
            Adds given Response Tree to the GraphNode.
            </summary>
            <param name="responseTree">Response Tree to Add.</param>
            <param name="mainBot">SynBot. The specified bot and its Cache Manager will be used to store the responses.</param>
        </member>
        <member name="M:Syn.Bot.Graph.GraphNode.SetEvaluate(Syn.Bot.ChatRequest,Syn.Bot.Graph.QueryTree)">
            <summary>
            Evaluates Sets.
            </summary>
            <param name="pathTree">PathTree.</param>
            <param name="mainBot">SynBot.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Graph.GraphNode.RegexEvaluate(Syn.Bot.ChatRequest,Syn.Bot.Graph.QueryTree)">
            <summary>
            Evaluates Regular Expressions.
            </summary>
            <param name="pathTree">PathTree.</param>
            <param name="mainBot">SynBot.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Graph.GraphNode.ZeroCardEvaluate(Syn.Bot.ChatRequest,System.String,Syn.Bot.Graph.QueryTree,Syn.Bot.Graph.QueryTree)">
            <summary>
            Evaluates a wildcard that matches zero or more values.
            </summary>
        </member>
        <member name="M:Syn.Bot.Graph.GraphNode.WildCardEvaluate(Syn.Bot.ChatRequest,System.String,Syn.Bot.Graph.QueryTree,Syn.Bot.Graph.QueryTree)">
            <summary>
            Evaluates a wildcard that matches atleast 1 value.
            </summary>
        </member>
        <member name="M:Syn.Bot.Graph.GraphNode.Delete">
            <summary>
            Safely removes this Node from its Parent.
            </summary>
        </member>
        <member name="P:Syn.Bot.Graph.GraphNode.Children">
            <summary>
            GraphNode children.
            </summary>
        </member>
        <member name="P:Syn.Bot.Graph.GraphNode.Parent">
            <summary>
            Gets the Parent of this GraphNode. This field is used to safely delete shared GraphNodes for Bots.
            </summary>
        </member>
        <member name="P:Syn.Bot.Graph.GraphNode.Keyword">
            <summary>
            Key associated with this GraphNode.
            </summary>
        </member>
        <member name="P:Syn.Bot.Graph.GraphNode.Response">
            <summary>
            Gets the response associated with this GraphNode.
            </summary>
        </member>
        <member name="P:Syn.Bot.Graph.GraphNode.HasChildren">
            <summary>
            Indicates whether this Graph Node has Children Nodes.
            </summary>
        </member>
        <member name="P:Syn.Bot.Graph.GraphNode.RegexChildren">
            <summary>
            Gets the children GraphNode whose Keyword starts with Regex Symbol.
            </summary>
        </member>
        <member name="T:Syn.Bot.ConceptType">
            <summary>
            Provides enumerated values used to determine the type of Concept.
            </summary>
        </member>
        <member name="F:Syn.Bot.ConceptType.Public">
            <summary>
            Public Concept.
            </summary>
        </member>
        <member name="F:Syn.Bot.ConceptType.Private">
            <summary>
            Concept Concept.
            </summary>
        </member>
        <member name="M:Syn.Bot.Collections.FilterCollection.#ctor(Syn.Bot.SynBot)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Collections.FilterCollection"/> class.
            </summary>
            <param name="mainBot">The main bot.</param>
        </member>
        <member name="M:Syn.Bot.Collections.FilterCollection.AddFilter(System.Xml.Linq.XElement)">
            <summary>
            Adds a filter.
            </summary>
            <param name="filterElement">The filter element.</param>
        </member>
        <member name="M:Syn.Bot.Collections.FilterCollection.Clear">
            <summary>
            Clears this filter collection.
            </summary>
        </member>
        <member name="P:Syn.Bot.Collections.FilterCollection.Count">
            <summary>
            Gets the total number of filter items added to this filter collection.
            </summary>
        </member>
        <member name="P:Syn.Bot.Graph.Tree.State">
            <summary>
            Gets the current query state.
            </summary>
        </member>
        <member name="P:Syn.Bot.Graph.Tree.IsParsed">
            <summary>
            Gets a value indicating whether this <see cref="T:Syn.Bot.Graph.Tree"/> is parsed and contains 0 token.
            </summary>
            <value>
              <c>true</c> if this <see cref="T:Syn.Bot.Graph.Tree"/> is parsed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syn.Bot.Graph.QueryTree.RemoveLastToken">
            <summary>
            Removes the Last token from this <see cref="T:Syn.Bot.Graph.QueryTree"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Graph.QueryTree.InputSentence">
            <summary>
            Actual sentence that made up this Token Tree. This property's value is created by splitting sentences using the Splitter.
            </summary>
        </member>
        <member name="P:Syn.Bot.Graph.QueryTree.OutputResponse">
            <summary>
            Used to store Output Response.
            </summary>
        </member>
        <member name="P:Syn.Bot.Graph.QueryTree.CurrentInputSentence">
            <summary>
            Input Sentence based on Token List.
            </summary>
        </member>
        <member name="P:Syn.Bot.Graph.ResponseTree.PreviousValue">
            <summary>
            Used to transfer Previous tag value to Model Response for Stack generation
            </summary>
        </member>
        <member name="T:Syn.Bot.Helper.CacheManager">
            <summary>
            Default cache management class for SynBot.
            </summary>
        </member>
        <member name="F:Syn.Bot.Helper.Compressor.HashTable">
            <summary>
            Hashtable, that can be allocated only once
            </summary>
        </member>
        <member name="M:Syn.Bot.Helper.Compressor.LzfCompress(System.Byte[],System.Byte[]@)">
            <summary>
            Compresses the data using LibLZF algorithm
            </summary>
            <param name="input">Reference to the data to compress</param>
            <param name="output">Reference to a buffer which will contain the compressed data</param>
            <returns>The size of the compressed archive in the output buffer</returns>
        </member>
        <member name="M:Syn.Bot.Helper.Compressor.LzfDecompress(System.Byte[],System.Byte[]@)">
            <summary>
            Decompresses the data using LibLZF algorithm
            </summary>
            <param name="input">Reference to the data to decompress</param>
            <param name="output">Reference to a buffer which will contain the decompressed data</param>
            <returns>Returns decompressed size</returns>
        </member>
        <member name="T:Syn.Bot.Logging.LogType">
            <summary>
            Type of Message.
            </summary>
        </member>
        <member name="F:Syn.Bot.Logging.LogType.Notice">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syn.Bot.Logging.LogType.Warning">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syn.Bot.Logging.LogType.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syn.Bot.Logging.LogType.Debug">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syn.Bot.Logging.LogType.Internal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syn.Bot.Plugins.MathPlugin.MathParser._supportedOperators">
            <summary>
            Contains supported operators
            </summary>
        </member>
        <member name="F:Syn.Bot.Plugins.MathPlugin.MathParser._supportedFunctions">
            <summary>
            Contains supported functions
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.MathPlugin.MathParser.#ctor">
            <summary>
            Initialize new instance of MathParser
            (symbol of decimal separator is read
            from regional settings in system)
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.MathPlugin.MathParser.#ctor(System.Char)">
            <summary>
            Initialize new instance of MathParser
            </summary>
            <param name="decimalSeparator">Set decimal separator</param>
        </member>
        <member name="M:Syn.Bot.Plugins.MathPlugin.MathParser.Parse(System.String,System.Boolean)">
            <summary>
            Produce result of the given math expression
            </summary>
            <param name="expression">Math expression (infix/standard notation)</param>
            <param name="isRadians"></param>
            <returns>Result</returns>
        </member>
        <member name="M:Syn.Bot.Plugins.MathPlugin.MathParser.FormatString(System.String)">
            <summary>
            Produce formatted string by the given string
            </summary>
            <param name="expression">Unformatted math expression</param>
            <returns>Formatted math expression</returns>
        </member>
        <member name="M:Syn.Bot.Plugins.MathPlugin.MathParser.ConvertToRPN(System.String)">
            <summary>
            Produce math expression in reverse polish notation
            by the given string
            </summary>
            <param name="expression">Math expression in infix notation</param>
            <returns>Math expression in postfix notation (RPN)</returns>
        </member>
        <member name="M:Syn.Bot.Plugins.MathPlugin.MathParser.LexicalAnalysisInfixNotation(System.String,System.Int32@)">
            <summary>
            Produce token by the given math expression
            </summary>
            <param name="expression">Math expression in infix notation</param>
            <param name="pos">Current position in string for lexical analysis</param>
            <returns>Token</returns>
        </member>
        <member name="M:Syn.Bot.Plugins.MathPlugin.MathParser.SyntaxAnalysisInfixNotation(System.String,System.Text.StringBuilder,System.Collections.Generic.Stack{System.String})">
            <summary>
            Syntax analysis of infix notation
            </summary>
            <param name="token">Token</param>
            <param name="outputString">Output string (math expression in RPN)</param>
            <param name="stack">Stack which contains operators (or functions)</param>
            <returns>Output string (math expression in RPN)</returns>
        </member>
        <member name="M:Syn.Bot.Plugins.MathPlugin.MathParser.Priority(System.String,System.String)">
            <summary>
            Is priority of token less (or equal) to priority of p
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.MathPlugin.MathParser.IsRightAssociated(System.String)">
            <summary>
            Is right associated operator
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.MathPlugin.MathParser.GetPriority(System.String)">
            <summary>
            Get priority of operator
            </summary>
        </member>
        <member name="M:Syn.Bot.Plugins.MathPlugin.MathParser.Calculate(System.String)">
            <summary>
            Calculate expression in reverse-polish notation
            </summary>
            <param name="expression">Math expression in reverse-polish notation</param>
            <returns>Result</returns>
        </member>
        <member name="M:Syn.Bot.Plugins.MathPlugin.MathParser.LexicalAnalysisRpn(System.String,System.Int32@)">
            <summary>
            Produce token by the given math expression
            </summary>
            <param name="expression">Math expression in reverse-polish notation</param>
            <param name="pos">Current position of lexical analysis</param>
            <returns>Token</returns>
        </member>
        <member name="M:Syn.Bot.Plugins.MathPlugin.MathParser.SyntaxAnalysisRpn(System.Collections.Generic.Stack{System.Double},System.String)">
            <summary>
            Syntax analysis of reverse-polish notation
            </summary>
            <param name="stack">Stack which contains operands</param>
            <param name="token">Token</param>
            <returns>Stack which contains operands</returns>
        </member>
        <member name="M:Syn.Bot.Plugins.MathPlugin.MathParser.ApplyTrigFunction(System.Func{System.Double,System.Double},System.Double)">
            <summary>
            Apply trigonometric function
            </summary>
            <param name="func">Trigonometric function</param>
            <param name="arg">Argument</param>
            <returns>Result of function</returns>
        </member>
        <member name="M:Syn.Bot.Plugins.MathPlugin.MathParser.NumberOfArguments(System.String)">
            <summary>
            Produce number of arguments for the given operator
            </summary>
        </member>
        <member name="T:Syn.Bot.ScriptType">
            <summary>
            Provides enumerated values to represent a Script.
            </summary>
        </member>
        <member name="F:Syn.Bot.ScriptType.JavaScript">
            <summary>
            Represents a JavaScript
            </summary>
        </member>
        <member name="F:Syn.Bot.ScriptType.Lua">
            <summary>
            Represents a Lua script
            </summary>
        </member>
        <member name="F:Syn.Bot.ScriptType.CSharp">
            <summary>
            Represents a C# code
            </summary>
        </member>
        <member name="T:Syn.Bot.ScriptManager">
            <summary>
            Provides functionality to interact with internal Scripting Engines.
            </summary>
        </member>
        <member name="M:Syn.Bot.ScriptManager.ExecuteJavaScript(System.String)">
            <summary>
            Executes the JavaScript provided and returns the result
            </summary>
            <param name="javaScript">The JavaScript.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.ScriptManager.FindAndExecute(System.Xml.Linq.XElement)">
            <summary>
            Finds the right script engine and executes the script.
            </summary>
        </member>
        <member name="P:Syn.Bot.ScriptManager.KnownScriptExtensions">
            <summary>
            Gets a list of all known script extensions.
            </summary>
        </member>
        <member name="F:Syn.Bot.Helper.Tag.Emotion">
            <summary>
            emotion element of EmotionML.
            </summary>
        </member>
        <member name="F:Syn.Bot.Helper.Tag.LowPrioritySymbol">
            <summary>
            A Symbol used for Word Containers. No wild cards are matched.
            </summary>
        </member>
        <member name="P:Syn.Bot.Helper.Tag.KnownSimlTags">
            <summary>
            Gets a list of all known tags.
            </summary>
        </member>
        <member name="P:Syn.Bot.Helper.Tag.KnownSimlAttributes">
            <summary>
            Gets a list of all known attributes.
            </summary>
        </member>
        <member name="M:Syn.Bot.Helper.Utility.CompressString(System.String)">
            <summary>
            Compresses the string.
            </summary>
            <param name="text">The text to compress.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Helper.Utility.DecompressString(System.String)">
            <summary>
            Decompresses the string.
            </summary>
            <param name="compressedText">The compressed text.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Helper.Utility.SaveToGraph(System.Xml.Linq.XElement,Syn.Bot.TagHandlers.HandlerParameter,Syn.Bot.Graph.GraphNode)">
            <summary>
            Saves content to GraphNode
            </summary>
            <param name="elementNode">The element node containing the content to save. Usually the Model element.</param>
            <param name="parameter">Parameter.</param>
            <param name="graphNode">GraphNode.</param>
        </member>
        <member name="P:Syn.Bot.Logging.LogAddedEventArgs.Source">
            <summary>
            Gets the source that generated this log. Usually the Bot ID is set as the source.
            </summary>
        </member>
        <member name="P:Syn.Bot.Logging.LogAddedEventArgs.Message">
            <summary>
            Get the log information.
            </summary>
        </member>
        <member name="P:Syn.Bot.Logging.LogAddedEventArgs.IsCommon">
            <summary>
            Gets a value indicating if this is a Common Log and is not associated with a Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.Logging.Logger.IsEnabled">
            <summary>
            Indicates if Logging is enabled.
            </summary>
        </member>
        <member name="T:Syn.Bot.Collections.MapCollection">
            <summary>
            Represents a collection of SIML Maps.
            </summary>
        </member>
        <member name="M:Syn.Bot.Collections.MapCollection.#ctor(Syn.Bot.SynBot)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Collections.MapCollection"/> class.
            </summary>
            <param name="mainBot">The main bot.</param>
        </member>
        <member name="M:Syn.Bot.Collections.MapCollection.AddMap(System.Xml.Linq.XElement)">
            <summary>
            Adds a Map to this collection.
            </summary>
            <param name="mapElement">The map element.</param>
        </member>
        <member name="M:Syn.Bot.Collections.MapCollection.GetMap(System.String)">
            <summary>
            Gets a Map with this specified name
            </summary>
            <param name="mapName">Name of the map.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Collections.MapCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains the specified Map.
            </summary>
            <param name="mapName">Name of the Map.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Collections.MapCollection.Transform(Syn.Bot.TagHandlers.HandlerParameter,System.String)">
            <summary>
            Transforms the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="mapName">Name of the Map.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Collections.MapCollection.Clear">
            <summary>
            Clears all Maps.
            </summary>
        </member>
        <member name="P:Syn.Bot.Collections.MapCollection.IsOverridable">
            <summary>
            Determines if an existing MapItem's value can be changed on Load. False by default.
            </summary>
        </member>
        <member name="T:Syn.Bot.PerformanceCounter">
            <summary>
            Contains functionality to compare internal function performance.
            </summary>
        </member>
        <member name="T:Syn.Bot.Collections.RegexCollection">
            <summary>
            Class that contains all Regular Expressions created by the Developer.
            </summary>
        </member>
        <member name="M:Syn.Bot.Collections.RegexCollection.IsAllowed">
            <summary>
            Determines if usage Regular Expressions is enabled.
            </summary>
        </member>
        <member name="T:Syn.Bot.ChatRequest">
            <summary>
            Represents a Chat Request.
            </summary>
        </member>
        <member name="M:Syn.Bot.ChatRequest.#ctor(System.String,Syn.Bot.RequestType,Syn.Bot.BotUser)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.ChatRequest"/> class.
            </summary>
            <param name="userMessage">The user message.</param>
            <param name="requestType">Type of request.</param>
            <param name="botUser">The bot user.</param>
        </member>
        <member name="P:Syn.Bot.ChatRequest.IsInternal">
            <summary>
            Gets or Sets the Request type. If True the request is made by the Utility ProcessNode function.
            </summary>
        </member>
        <member name="P:Syn.Bot.ChatRequest.UserMessage">
            <summary>
            Gets the raw user request message
            </summary>
        </member>
        <member name="P:Syn.Bot.ChatRequest.Type">
            <summary>
            Gets the type of chat request.
            </summary>
        </member>
        <member name="P:Syn.Bot.ChatRequest.User">
            <summary>
            Gets the user associated with this chat request.
            </summary>
        </member>
        <member name="P:Syn.Bot.ChatRequest.Bot">
            <summary>
            Gets the bot to which the chat request is to be made.
            </summary>
        </member>
        <member name="P:Syn.Bot.ChatRequest.Stats">
            <summary>
            Gets the statistics of this chat request.
            </summary>
        </member>
        <member name="P:Syn.Bot.ChatRequest.InputList">
            <summary>
            Gets the List of Splitted Queries based on User Message.
            </summary>
        </member>
        <member name="T:Syn.Bot.Response">
            <summary>
            Represents a response generated after a <see cref="T:Syn.Bot.Graph.GraphNode"/> has successfully been evaluated.
            </summary>
        </member>
        <member name="F:Syn.Bot.Response.Empty">
            <summary>
            Returns an Empty Response. This field is read-only.
            </summary>
        </member>
        <member name="P:Syn.Bot.Response.Element">
            <summary>
            Gets the XML element that represents this response.
            </summary>
        </member>
        <member name="P:Syn.Bot.Response.Concept">
            <summary>
            Gets or sets the Concept for this Response.
            </summary>
        </member>
        <member name="P:Syn.Bot.Response.ConceptType">
            <summary>
            Gets or sets the ConceptType for this Response.
            </summary>
        </member>
        <member name="P:Syn.Bot.Response.Label">
            <summary>
            Gets or sets the Label for this Response.
            </summary>
        </member>
        <member name="P:Syn.Bot.Response.HasLabel">
            <summary>
            Gets a value indicating if this Response has a Label.
            </summary>
        </member>
        <member name="P:Syn.Bot.Response.IsEmpty">
            <summary>
            Gets a value indicating if this Response is Empty.
            </summary>
        </member>
        <member name="P:Syn.Bot.Response.OutputMessage">
            <summary>
            Gets the Output Sentence for this Response.
            </summary>
        </member>
        <member name="T:Syn.Bot.ChatResult">
            <summary>
            Represents a Bot message that is generated after a <see cref="T:Syn.Bot.ChatRequest"/> is made.
            </summary>
        </member>
        <member name="M:Syn.Bot.ChatResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Syn.Bot.ChatResult.Stack">
            <summary>
            Gets the stack frames for this <see cref="T:Syn.Bot.ChatResult"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.ChatResult.LastLabel">
            <summary>
            Gets the last <c>Label</c> that was set for a <see cref="T:Syn.Bot.Response"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.ChatResult.Responses">
            <summary>
            Gets or sets the responses.
            </summary>
            <value>
            The responses.
            </value>
        </member>
        <member name="P:Syn.Bot.ChatResult.Success">
            <summary>
            Gets a value indicating whether this <see cref="T:Syn.Bot.ChatResult"/> has a <see cref="T:Syn.Bot.Response"/>.
            </summary>
            <value>
              <c>true</c> if successful; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.ChatResult.Hint">
            <summary>
            Gets the next user message the Bot expects.
            </summary>
        </member>
        <member name="P:Syn.Bot.ChatResult.Stats">
            <summary>
            Gets the time taken to process the Result in Milliseconds.
            </summary>
        </member>
        <member name="P:Syn.Bot.ChatResult.BotMessage">
            <summary>
            Gets the entire Message the Bot generated for a chat request it received.
            </summary>
        </member>
        <member name="P:Syn.Bot.ChatResult.LastResponse">
            <summary>
            Gets the last Response added to this Result.
            </summary>
        </member>
        <member name="P:Syn.Bot.ChatResult.BotEmotion">
            <summary>
            Gets the Bot emotion associated with this <see cref="T:Syn.Bot.ChatResult"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.ChatResult.UserEmotion">
            <summary>
            Gets the User emotion associated with this <see cref="T:Syn.Bot.ChatResult"/>
            </summary>
        </member>
        <member name="T:Syn.Bot.BotSettings">
            <summary>
            A Settings class derived for storing Bot related variables.
            </summary>
        </member>
        <member name="T:Syn.Bot.Settings">
            <summary>
            Provides functionality to interact with SIML variables.
            </summary>
        </member>
        <member name="F:Syn.Bot.Settings.VariablesTable">
            <summary>
            Key = Name, Value = Settings Value
            </summary>
        </member>
        <member name="M:Syn.Bot.Settings.Load(System.Xml.Linq.XElement)">
            <summary>
            Loads the specified settings element.
            </summary>
            <param name="settingsElement">The settings element.</param>
        </member>
        <member name="M:Syn.Bot.Settings.Load(Syn.Bot.Settings)">
            <summary>
            Loads the specified settings.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Syn.Bot.Settings.TryGetValue(System.String,System.String@)">
            <summary>
            Tries to get the value of a variable.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="variableValue">value of the variable.</param>
            <returns>true if the variable was found; otherwise false.</returns>
        </member>
        <member name="M:Syn.Bot.Settings.TryGetValue(System.String,System.Int32@)">
            <summary>
            Tries the get the value of a variable.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="variableValue">Value of the variable.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Settings.GetValue(System.String)">
            <summary>
            Gets the main value of the specified variable.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <returns>Value of the variable if it exists otherwise returns the default value.</returns>
        </member>
        <member name="M:Syn.Bot.Settings.GetList(System.String)">
            <summary>
            Gets the list of all values stored within the specified variable.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Settings.SetVariable(System.String,System.String)">
            <summary>
            Sets the value of a variable.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="value">variable value.</param>
        </member>
        <member name="M:Syn.Bot.Settings.SetVariable(System.String,System.Int32)">
            <summary>
            Sets the value of a variable.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="value">Variable value.</param>
        </member>
        <member name="M:Syn.Bot.Settings.AddVariable(System.String,System.String)">
            <summary>
            Adds a value to a variable that is stored as an array.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="settingsValue">Value to add.</param>
        </member>
        <member name="M:Syn.Bot.Settings.AddVariable(System.String,System.Int32)">
            <summary>
            Adds an <see cref="T:System.Int32"/> value to a variable that is stored as an array.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="settingsValue">Variable value.</param>
        </member>
        <member name="M:Syn.Bot.Settings.ContainsValue(System.String,System.String)">
            <summary>
            Determines whether the specified variable name contains the specified value.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="value">Value to search.</param>
            <returns>true if the variable contains the specified value; otherwise, false.</returns>
        </member>
        <member name="M:Syn.Bot.Settings.ContainsVariable(System.String)">
            <summary>
            Determines whether the specified variable exists.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <returns>true if the specified variable exists; otherwise, false.</returns>
        </member>
        <member name="M:Syn.Bot.Settings.GetVariable(System.String)">
            <summary>
            Gets a <see cref="T:Syn.Bot.VariableItem"/> with the specified name.
            </summary>
            <param name="variableName">Name of the variable.</param>
        </member>
        <member name="M:Syn.Bot.Settings.RemoveVariable(System.String)">
            <summary>
            Removes the variable with the specified name.
            </summary>
            <param name="variableName">Name of the variable.</param>
        </member>
        <member name="M:Syn.Bot.Settings.Clear">
            <summary>
            Clears all variables and their values.
            </summary>
        </member>
        <member name="P:Syn.Bot.Settings.TagName">
            <summary>
            Gets the name that represents the owner of the variables contained within this <see cref="T:Syn.Bot.Settings"/> class.
            </summary>
            <remarks><c>UserSettings</c> represents a set of user related variables. <c>BotSettings</c> represents a set of bot related variables.</remarks>
        </member>
        <member name="P:Syn.Bot.Settings.IsOverridable">
            <summary>
            Determines if a VariableItem can be replaced by a new VariableItem on Load. False by default.
            </summary>
        </member>
        <member name="P:Syn.Bot.Settings.DefaultValue">
            <summary>
            Gets or Sets the Default Value to return when a Settings Item is not found.
            </summary>
        </member>
        <member name="P:Syn.Bot.Settings.UndefinedValue">
            <summary>
            Gets the value that is used to render a Variable as undefined.
            </summary>
        </member>
        <member name="P:Syn.Bot.Settings.Variables">
            <summary>
            Gets the variables.
            </summary>
            <value>
            The variables.
            </value>
        </member>
        <member name="M:Syn.Bot.BotSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.BotSettings"/> class.
            </summary>
        </member>
        <member name="T:Syn.Bot.Collections.SetCollection">
            <summary>
            Represents a collection of SIML <see cref="T:Syn.Bot.Classes.SetItem"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Collections.SetCollection.#ctor(Syn.Bot.SynBot)">
            <summary>
            Initializes a new instance of <see cref="T:Syn.Bot.Collections.SetCollection"/> class.
            </summary>
            <param name="bot"></param>
        </member>
        <member name="P:Syn.Bot.Collections.SetCollection.IsSetOverridable">
            <summary>
            Gets a value indicating if an already existing <see cref="T:Syn.Bot.Classes.SetItem"/> can be replaced by a new <see cref="T:Syn.Bot.Classes.SetItem"/>.
            </summary>
        </member>
        <member name="T:Syn.Bot.VariableItem">
            <summary>
            Represents an SIML variable.
            </summary>
        </member>
        <member name="M:Syn.Bot.VariableItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.VariableItem"/> class.
            </summary>
            <param name="name">Variable name.</param>
            <param name="value">Variable value.</param>
        </member>
        <member name="M:Syn.Bot.VariableItem.Add(System.String)">
            <summary>
            Adds the specified value to this <see cref="T:Syn.Bot.VariableItem"/>
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Syn.Bot.VariableItem.Remove(System.String)">
            <summary>
            Removes the specified value from this <see cref="T:Syn.Bot.VariableItem"/>
            </summary>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:Syn.Bot.VariableItem.Contains(System.String)">
            <summary>
            Determines whether this <see cref="T:Syn.Bot.VariableItem"/> contains the specified value.
            </summary>
            <param name="value">The value to search.</param>
            <returns>true if this <see cref="T:Syn.Bot.VariableItem"/> contains the specified value; otherwise, false.</returns>
        </member>
        <member name="P:Syn.Bot.VariableItem.Name">
            <summary>
            Gets the name of this variable.
            </summary>
        </member>
        <member name="P:Syn.Bot.VariableItem.Value">
            <summary>
            Gets or sets main value of this variable.
            </summary>
        </member>
        <member name="P:Syn.Bot.VariableItem.ValueList">
            <summary>
            Gets a list of all the values stored within this <see cref="T:Syn.Bot.VariableItem"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.VariableItem.Clone">
            <summary>
            Gets the copy of this <see cref="T:Syn.Bot.VariableItem"/>.
            </summary>
            <value>
            Deep copy of <see cref="T:Syn.Bot.VariableItem"/>
            </value>
        </member>
        <member name="T:Syn.Bot.SynBot">
            <summary>
            Official SIML Interpreter developed by Synthetic Intelligence Network
            </summary>
        </member>
        <member name="M:Syn.Bot.SynBot.#ctor">
            <summary>
            Initializes a new instance of SynBot class.
            </summary>
        </member>
        <member name="M:Syn.Bot.SynBot.#ctor(Syn.Bot.BotConfiguration)">
            <summary>
            Initializes a new instance of <see cref="T:Syn.Bot.SynBot"/> class with the specified configuration.
            </summary>
            <param name="configuration">Bot Configuration.</param>
        </member>
        <member name="M:Syn.Bot.SynBot.HasUser(System.String)">
            <summary>
            Gets a value indicating if a user with the given ID exists.
            </summary>
            <param name="userId">User ID.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.SynBot.GetUser(System.String)">
            <summary>
            Gets a user with the given ID.
            </summary>
            <param name="userId">User ID.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.SynBot.RemoveUser(System.String)">
            <summary>
            Removes a User with the specified ID.
            </summary>
            <param name="userId">User ID.</param>
        </member>
        <member name="M:Syn.Bot.SynBot.TryGetUser(System.String)">
            <summary>
            Gets a User with the specified ID. If user does not exist then a new User with the specified ID is created and returned.
            </summary>
            <param name="userId">User ID.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.SynBot.CreateUser">
            <summary>
            Create User
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.SynBot.CreateUser(System.String)">
            <summary>
            Create User
            </summary>
            <param name="userId">user</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.SynBot.AddSiml(System.String)">
            <summary>
            Loads SIML from string preserving all whitespace.
            </summary>
            <param name="siml">SIML String.</param>
        </member>
        <member name="M:Syn.Bot.SynBot.AddSiml(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Adds SIML
            </summary>
            <param name="simlElements">SIML Elements</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.SynBot.AddSiml(System.Xml.Linq.XElement)">
            <summary>
            Add SIML
            </summary>
            <param name="simlElement">SIML Element</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.SynBot.Load">
            <summary>
            Loads all added SIML files.
            </summary>
            <remarks>This function must be called after you have added all the desired SIML elements.</remarks>
        </member>
        <member name="M:Syn.Bot.SynBot.Chat(System.String)">
            <summary>
            Chat
            </summary>
            <param name="userMessage">user Message</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.SynBot.Chat(Syn.Bot.ChatRequest)">
            <summary>
            Chats the specified chat request.
            </summary>
            <param name="chatRequest">The chat request.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.SynBot.Release">
            <summary>
            Releases and clears all resources used by this Bot. This function is to be used if the Bot has a Parent.
            </summary>
        </member>
        <member name="P:Syn.Bot.SynBot.MaxBotIdleTime">
            <summary>
            Gets the maximum idle time span after which the Bot is declared Idle.
            </summary>
        </member>
        <member name="P:Syn.Bot.SynBot.RandomCollection">
            <summary>
            Gets the collection of Random and Phrase items.
            </summary>
        </member>
        <member name="P:Syn.Bot.SynBot.Specification">
            <summary>
            Gets the SIML specification supported by this Class Library.
            </summary>
        </member>
        <member name="P:Syn.Bot.SynBot.Parent">
            <summary>
            Get the Parent Bot
            </summary>
            <returns>The Parent Bot if it exists else returns null.</returns>
        </member>
        <member name="P:Syn.Bot.SynBot.HasParent">
            <summary>
            Determines if this Bot has a parent Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.SynBot.EmotionMLParser">
            <summary>
            Gets the default EmotionML parser.
            </summary>
        </member>
        <member name="P:Syn.Bot.SynBot.Emotion">
            <summary>
            Gets the current emotion for the Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.SynBot.Examples">
            <summary>
            Gets a list of atomic patterns known by the bot.
            </summary>
            <value>
            Atomic Patterns.
            </value>
        </member>
        <member name="P:Syn.Bot.SynBot.Logger">
            <summary>
            Gets the default logger.
            </summary>
        </member>
        <member name="P:Syn.Bot.SynBot.MainUser">
            <summary>
            Gets the "supposedly" main user for this Bot.
            </summary>
            <value>
            Main user
            </value>
        </member>
        <member name="P:Syn.Bot.SynBot.Settings">
            <summary>
            Gets the Settings object that contains Bot variables.
            </summary>
            <value>
            List of variables known by the Bot.
            </value>
        </member>
        <member name="P:Syn.Bot.SynBot.MapCollection">
            <summary>
            Gets the map collection.
            </summary>
            <value>
            The map collection.
            </value>
        </member>
        <member name="P:Syn.Bot.SynBot.FilterCollection">
            <summary>
            Gets the filter collection.
            </summary>
            <value>
            The filter collection.
            </value>
        </member>
        <member name="P:Syn.Bot.SynBot.ScriptManager">
            <summary>
            Gets the Script Manager.
            </summary>
        </member>
        <member name="P:Syn.Bot.SynBot.SplitterCollection">
            <summary>
            Gets the Splitter Collection.
            </summary>
        </member>
        <member name="P:Syn.Bot.SynBot.GraphMaster">
            <summary>
            Gets the master Graph Node.
            </summary>
        </member>
        <member name="P:Syn.Bot.SynBot.RegexCollection">
            <summary>
            Gets the regex collection.
            </summary>
            <value>
            The regex collection.
            </value>
        </member>
        <member name="P:Syn.Bot.SynBot.SetCollection">
            <summary>
            Gets the set collection.
            </summary>
            <value>
            The set collection.
            </value>
        </member>
        <member name="P:Syn.Bot.SynBot.RepeatManager">
            <summary>
            Gets the repeat manager.
            </summary>
            <value>
            The repeat manager.
            </value>
        </member>
        <member name="P:Syn.Bot.SynBot.Culture">
            <summary>
            Gets the <see cref="T:System.Globalization.CultureInfo"/> under which the Bot is currently operating.
            </summary>
        </member>
        <member name="P:Syn.Bot.SynBot.Stats">
            <summary>
            Gets Bot stats.
            </summary>
            <value>
            BotStats
            </value>
        </member>
        <member name="P:Syn.Bot.SynBot.Timeout">
            <summary>
            Gets the time span after which a chat request is timed out
            </summary>
            <value>
            Timeout
            </value>
        </member>
        <member name="P:Syn.Bot.SynBot.Users">
            <summary>
            Gets all known <see cref="T:Syn.Bot.BotUser"/>s.
            </summary>
        </member>
        <member name="P:Syn.Bot.SynBot.CacheManager">
            <summary>
            Gets the cache manager.
            </summary>
        </member>
        <member name="P:Syn.Bot.SynBot.Encoding">
            <summary>
            Gets the encoding used by the Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.SynBot.IdleTime">
            <summary>
            Gets the idle time for this bot.
            </summary>
            <remarks>An idle time for a bot is the time period for which the bot had no chat requests.</remarks>
        </member>
        <member name="P:Syn.Bot.SynBot.IsIdle">
            <summary>
            Gets a value indicating if this bot has exceeded its maximum allowed idle time.
            </summary>
        </member>
        <member name="P:Syn.Bot.SynBot.ID">
            <summary>
            Gets the Unique ID assigned to this Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.SynBot.PackageManager">
            <summary>
            Loads SIML Package from String.
            </summary>
        </member>
        <member name="P:Syn.Bot.SynBot.IsLoaded">
            <summary>
            Determines if all the added SIML have been loaded into the Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.TagHandlers.IfTag.IsRecursive">
            <summary>
            False - Processing of inner nodes should only be done if a condition is satisfied.
            </summary>
        </member>
        <member name="M:Syn.Bot.TagHandlers.MathTag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.TagHandlers.MathTag"/> class.
            </summary>
        </member>
        <member name="T:Syn.Bot.StackFrame">
            <summary>
            Container class for Stack information.
            </summary>
        </member>
        <member name="P:Syn.Bot.StackFrame.Concept">
            <summary>
            Gets the SIML Concept name.
            </summary>
        </member>
        <member name="P:Syn.Bot.StackFrame.Pattern">
            <summary>
            Gets the SIML Pattern that triggered this <see cref="T:Syn.Bot.Response"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.StackFrame.Siml">
            <summary>
            Gets the SIML code.
            </summary>
        </member>
        <member name="P:Syn.Bot.StackFrame.Previous">
            <summary>
            Gets the value of the <c>Previous</c> element.
            </summary>
            <value>
            Previous element's value.
            </value>
        </member>
        <member name="P:Syn.Bot.StackFrame.Label">
            <summary>
            Gets the value of the <c>Label</c> associated with this <see cref="T:Syn.Bot.Response"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.StackFrame.Output">
            <summary>
            Gets the Bot output.
            </summary>
        </member>
        <member name="T:Syn.Bot.BotUser">
            <summary>
            Represents an entity that interacts with <see cref="T:Syn.Bot.SynBot"/>
            </summary>
        </member>
        <member name="M:Syn.Bot.BotUser.#ctor(Syn.Bot.SynBot,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.BotUser"/> class.
            </summary>
            <param name="bot">The bot.</param>
            <param name="userId">The user identifier.</param>
        </member>
        <member name="M:Syn.Bot.BotUser.#ctor(Syn.Bot.SynBot)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.BotUser"/> class.
            </summary>
            <param name="bot">The bot.</param>
        </member>
        <member name="P:Syn.Bot.BotUser.Variables">
            <summary>
            Gets the variables that are stored temporarily during a chat session.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotUser.IsIdle">
            <summary>
            Gets a value indicating whether this user is idle.
            </summary>
            <value>
              <c>true</c> if this user is idle; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotUser.IdleTime">
            <summary>
            Gets the idle time for the user.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotUser.ID">
            <summary>
            Gets a <see cref="T:System.String"/> that uniquely identifies this user.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotUser.Bot">
            <summary>
            Gets the bot associated with this user.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotUser.HasHistory">
            <summary>
            Gets a value indicating whether this user has a history.
            </summary>
            <value>
            <c>true</c> if this user has a history; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.BotUser.Results">
            <summary>
            Gets the previous results stored.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotUser.Requests">
            <summary>
            Gets a list of <see cref="T:Syn.Bot.ChatRequest"/>s made by this user.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotUser.Emotion">
            <summary>
            Gets or sets the emotional state for the user.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotUser.LastChatResult">
            <summary>
            Gets the last chat result.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotUser.LastChatRequest">
            <summary>
            Gets the last chat request.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotUser.Settings">
            <summary>
            Gets the settings that contains user related variables.
            </summary>
        </member>
        <member name="P:Syn.Bot.BotUser.MiniGraph">
            <summary>
            Gets the mini graph used to store user related Models.
            </summary>
        </member>
        <member name="T:Syn.Bot.UserSettings">
            <summary>
            A Settings class for SynUser.
            </summary>
        </member>
        <member name="M:Syn.Bot.UserSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.UserSettings"/> class.
            </summary>
        </member>
        <member name="T:Syn.Bot.VariableSettings">
            <summary>
            Represents an arbitrary container for temporary variables.
            </summary>
        </member>
    </members>
</doc>
