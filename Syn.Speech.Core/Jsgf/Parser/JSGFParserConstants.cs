//PATROLLED + REFACTORED
namespace Syn.Speech.Jsgf.Parser
{
    /// <summary>
    /// Token literal values and constants.
    /// Generated by org.javacc.parser.OtherFilesGen#start()
    /// </summary>
    public abstract class JSGFParserConstants
    {
        /// <summary>
        /// End of File.
        /// </summary>
        protected const int Eof = 0;
        /// <summary>
        /// RegularExpression Id.
        /// </summary>
        protected const int SingleLineComment = 9;
        /// <summary>
        /// RegularExpression Id.
        /// </summary>
        protected int FormalComment = 10;
        /// <summary>
        /// RegularExpression Id.
        /// </summary>
        protected int MultiLineComment = 11;
        /// <summary>
        /// RegularExpression Id.
        /// </summary>
        protected const int Grammar = 13;
        /// <summary>
        /// RegularExpression Id.
        /// </summary>
        protected const int Import = 14;
        /// <summary>
        /// RegularExpression Id.
        /// </summary>
        protected const int Public = 15;
        /// <summary>
        /// RegularExpression Id.
        /// </summary>
        protected const int IntegerLiteral = 16;
        /// <summary>
        /// RegularExpression Id.
        /// </summary>
        protected int DecimalLiteral = 17;
        /// <summary>
        /// RegularExpression Id.
        /// </summary>
        protected const int FloatingPointLiteral = 18;
        /// <summary>
        /// RegularExpression Id.
        /// </summary>
        protected int Exponent = 19;
        /// <summary>
        /// RegularExpression Id.
        /// </summary>
        protected int CharacterLiteral = 20;
        /// <summary>
        /// RegularExpression Id.
        /// </summary>
        protected const int StringLiteral = 21;
        /// <summary>
        /// RegularExpression Id.
        /// </summary>
        protected const int Tag = 22;
        /// <summary>
        /// RegularExpression Id.
        /// </summary>
        protected const int Identifier = 23;
        /// <summary>
        /// RegularExpression Id.
        /// </summary>
        protected int Letter = 24;
        /// <summary>
        /// RegularExpression Id.
        /// </summary>
        protected int Digit = 25;

        /// <summary>
        /// Lexical state.
        /// </summary>
        protected int Default = 0;
        /// <summary>
        /// Lexical state.
        /// </summary>
        protected int InSingleLineComment = 1;
        /// <summary>
        /// Lexical state.
        /// </summary>
        protected int InFormalComment = 2;
        /// <summary>
        /// Lexical state.
        /// </summary>
        protected int InMultiLineComment = 3;

        /// <summary>
        /// Literal token values.
        /// </summary>
        protected string[] TokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"//\"",
    "<token of kind 7>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 12>",
    "\"grammar\"",
    "\"import\"",
    "\"public\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<TAG>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\";\"",
    "\"V1.0\"",
    "\"<\"",
    "\".\"",
    "\"*\"",
    "\">\"",
    "\"=\"",
    "\"|\"",
    "\"/\"",
    "\"+\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\""
  };

    }
}
